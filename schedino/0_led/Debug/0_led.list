
0_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002998  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002b20  08002b20  00003b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b50  08002b50  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002b50  08002b50  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002b50  08002b50  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b50  08002b50  00003b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b54  08002b54  00003b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b58  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000003ac  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b8  200003b8  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca52  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e1e  00000000  00000000  00010a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  000128b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000896  00000000  00000000  000133e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cb84  00000000  00000000  00013c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee42  00000000  00000000  00030802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab3d8  00000000  00000000  0003f644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eaa1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e6c  00000000  00000000  000eaa60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000ed8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b08 	.word	0x08002b08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b08 	.word	0x08002b08

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb04 	bl	80007d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f822 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f922 	bl	800041c <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f880 	bl	80002dc <MX_I2C1_Init>
  MX_SPI1_Init();
 80001dc:	f000 f8be 	bl	800035c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001e0:	f000 f8fa 	bl	80003d8 <MX_USB_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (GPIO_PIN_SET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 80001e4:	2101      	movs	r1, #1
 80001e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001ea:	f000 fdbb 	bl	8000d64 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d1f7      	bne.n	80001e4 <main+0x1c>
		while(GPIO_PIN_SET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 80001f4:	bf00      	nop
 80001f6:	2101      	movs	r1, #1
 80001f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001fc:	f000 fdb2 	bl	8000d64 <HAL_GPIO_ReadPin>
 8000200:	4603      	mov	r3, r0
 8000202:	2b01      	cmp	r3, #1
 8000204:	d0f7      	beq.n	80001f6 <main+0x2e>
		HAL_GPIO_TogglePin(GPIOE, LD5_Pin);
 8000206:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800020a:	4802      	ldr	r0, [pc, #8]	@ (8000214 <main+0x4c>)
 800020c:	f000 fdda 	bl	8000dc4 <HAL_GPIO_TogglePin>
	  if (GPIO_PIN_SET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8000210:	e7e8      	b.n	80001e4 <main+0x1c>
 8000212:	bf00      	nop
 8000214:	48001000 	.word	0x48001000

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b09e      	sub	sp, #120	@ 0x78
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000222:	2228      	movs	r2, #40	@ 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fc42 	bl	8002ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	463b      	mov	r3, r7
 800023e:	223c      	movs	r2, #60	@ 0x3c
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 fc34 	bl	8002ab0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000248:	2303      	movs	r3, #3
 800024a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800024c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000250:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000266:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000268:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800026c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000272:	4618      	mov	r0, r3
 8000274:	f000 ffba 	bl	80011ec <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800027e:	f000 f94b 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2302      	movs	r3, #2
 8000288:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000292:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000298:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800029c:	2101      	movs	r1, #1
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 ffb2 	bl	8002208 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002aa:	f000 f935 	bl	8000518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80002ae:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <SystemClock_Config+0xc0>)
 80002b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002bc:	463b      	mov	r3, r7
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 f964 	bl	800258c <HAL_RCCEx_PeriphCLKConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002ca:	f000 f925 	bl	8000518 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3778      	adds	r7, #120	@ 0x78
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	00020020 	.word	0x00020020

080002dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000354 <MX_I2C1_Init+0x78>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <MX_I2C1_Init+0x7c>)
 80002ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f2:	4b17      	ldr	r3, [pc, #92]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000304:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_I2C1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000316:	480e      	ldr	r0, [pc, #56]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000318:	f000 fd6e 	bl	8000df8 <HAL_I2C_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000322:	f000 f8f9 	bl	8000518 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000326:	2100      	movs	r1, #0
 8000328:	4809      	ldr	r0, [pc, #36]	@ (8000350 <MX_I2C1_Init+0x74>)
 800032a:	f000 fe00 	bl	8000f2e <HAL_I2CEx_ConfigAnalogFilter>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000334:	f000 f8f0 	bl	8000518 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000338:	2100      	movs	r1, #0
 800033a:	4805      	ldr	r0, [pc, #20]	@ (8000350 <MX_I2C1_Init+0x74>)
 800033c:	f000 fe42 	bl	8000fc4 <HAL_I2CEx_ConfigDigitalFilter>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 f8e7 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000028 	.word	0x20000028
 8000354:	40005400 	.word	0x40005400
 8000358:	2000090e 	.word	0x2000090e

0800035c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000360:	4b1b      	ldr	r3, [pc, #108]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000362:	4a1c      	ldr	r2, [pc, #112]	@ (80003d4 <MX_SPI1_Init+0x78>)
 8000364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000366:	4b1a      	ldr	r3, [pc, #104]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000368:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800036c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036e:	4b18      	ldr	r3, [pc, #96]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000374:	4b16      	ldr	r3, [pc, #88]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000376:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800037a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037c:	4b14      	ldr	r3, [pc, #80]	@ (80003d0 <MX_SPI1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000382:	4b13      	ldr	r3, [pc, #76]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000388:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <MX_SPI1_Init+0x74>)
 800038a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800038e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000392:	2208      	movs	r2, #8
 8000394:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <MX_SPI1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003a8:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003aa:	2207      	movs	r2, #7
 80003ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003b4:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003bc:	f002 fa94 	bl	80028e8 <HAL_SPI_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003c6:	f000 f8a7 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	2000007c 	.word	0x2000007c
 80003d4:	40013000 	.word	0x40013000

080003d8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80003dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 80003de:	4a0e      	ldr	r2, [pc, #56]	@ (8000418 <MX_USB_PCD_Init+0x40>)
 80003e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80003e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 80003e4:	2208      	movs	r2, #8
 80003e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80003e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 80003ea:	2202      	movs	r2, #2
 80003ec:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80003ee:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 80003f0:	2202      	movs	r2, #2
 80003f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80003f4:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000400:	4804      	ldr	r0, [pc, #16]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 8000402:	f000 fe2b 	bl	800105c <HAL_PCD_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800040c:	f000 f884 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000e0 	.word	0x200000e0
 8000418:	40005c00 	.word	0x40005c00

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	@ 0x28
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0314 	add.w	r3, r7, #20
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000432:	4b37      	ldr	r3, [pc, #220]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a36      	ldr	r2, [pc, #216]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000438:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b34      	ldr	r3, [pc, #208]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000446:	613b      	str	r3, [r7, #16]
 8000448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044a:	4b31      	ldr	r3, [pc, #196]	@ (8000510 <MX_GPIO_Init+0xf4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a30      	ldr	r2, [pc, #192]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000450:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b2e      	ldr	r3, [pc, #184]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000462:	4b2b      	ldr	r3, [pc, #172]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a2a      	ldr	r2, [pc, #168]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000468:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b28      	ldr	r3, [pc, #160]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b25      	ldr	r3, [pc, #148]	@ (8000510 <MX_GPIO_Init+0xf4>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a24      	ldr	r2, [pc, #144]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b22      	ldr	r3, [pc, #136]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000492:	4b1f      	ldr	r3, [pc, #124]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a1e      	ldr	r2, [pc, #120]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b1c      	ldr	r3, [pc, #112]	@ (8000510 <MX_GPIO_Init+0xf4>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004aa:	2200      	movs	r2, #0
 80004ac:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80004b0:	4818      	ldr	r0, [pc, #96]	@ (8000514 <MX_GPIO_Init+0xf8>)
 80004b2:	f000 fc6f 	bl	8000d94 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80004b6:	2337      	movs	r3, #55	@ 0x37
 80004b8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004ba:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80004be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	4619      	mov	r1, r3
 80004ca:	4812      	ldr	r0, [pc, #72]	@ (8000514 <MX_GPIO_Init+0xf8>)
 80004cc:	f000 fad0 	bl	8000a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004d0:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80004d4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	2300      	movs	r3, #0
 80004e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	4619      	mov	r1, r3
 80004e8:	480a      	ldr	r0, [pc, #40]	@ (8000514 <MX_GPIO_Init+0xf8>)
 80004ea:	f000 fac1 	bl	8000a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ee:	2301      	movs	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4619      	mov	r1, r3
 8000500:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000504:	f000 fab4 	bl	8000a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000508:	bf00      	nop
 800050a:	3728      	adds	r7, #40	@ 0x28
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000
 8000514:	48001000 	.word	0x48001000

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <Error_Handler+0x8>

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <HAL_MspInit+0x44>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a0e      	ldr	r2, [pc, #56]	@ (8000568 <HAL_MspInit+0x44>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <HAL_MspInit+0x44>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <HAL_MspInit+0x44>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a08      	ldr	r2, [pc, #32]	@ (8000568 <HAL_MspInit+0x44>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <HAL_MspInit+0x44>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800055a:	2007      	movs	r0, #7
 800055c:	f000 fa54 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000

0800056c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a17      	ldr	r2, [pc, #92]	@ (80005e8 <HAL_I2C_MspInit+0x7c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d127      	bne.n	80005de <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b17      	ldr	r3, [pc, #92]	@ (80005ec <HAL_I2C_MspInit+0x80>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a16      	ldr	r2, [pc, #88]	@ (80005ec <HAL_I2C_MspInit+0x80>)
 8000594:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <HAL_I2C_MspInit+0x80>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80005a6:	23c0      	movs	r3, #192	@ 0xc0
 80005a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005aa:	2312      	movs	r3, #18
 80005ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b2:	2303      	movs	r3, #3
 80005b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005b6:	2304      	movs	r3, #4
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <HAL_I2C_MspInit+0x84>)
 80005c2:	f000 fa55 	bl	8000a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <HAL_I2C_MspInit+0x80>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a08      	ldr	r2, [pc, #32]	@ (80005ec <HAL_I2C_MspInit+0x80>)
 80005cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_I2C_MspInit+0x80>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	@ 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40005400 	.word	0x40005400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000400 	.word	0x48000400

080005f4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <HAL_SPI_MspInit+0x7c>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d128      	bne.n	8000668 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <HAL_SPI_MspInit+0x80>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <HAL_SPI_MspInit+0x80>)
 800061c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <HAL_SPI_MspInit+0x80>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <HAL_SPI_MspInit+0x80>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a10      	ldr	r2, [pc, #64]	@ (8000674 <HAL_SPI_MspInit+0x80>)
 8000634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000638:	6153      	str	r3, [r2, #20]
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <HAL_SPI_MspInit+0x80>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000646:	23e0      	movs	r3, #224	@ 0xe0
 8000648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064a:	2302      	movs	r3, #2
 800064c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000652:	2303      	movs	r3, #3
 8000654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000656:	2305      	movs	r3, #5
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000664:	f000 fa04 	bl	8000a70 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	@ 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40013000 	.word	0x40013000
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <HAL_PCD_MspInit+0x80>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d129      	bne.n	80006ee <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <HAL_PCD_MspInit+0x84>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a17      	ldr	r2, [pc, #92]	@ (80006fc <HAL_PCD_MspInit+0x84>)
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <HAL_PCD_MspInit+0x84>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80006b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c0:	2303      	movs	r3, #3
 80006c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80006c4:	230e      	movs	r3, #14
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d2:	f000 f9cd 	bl	8000a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <HAL_PCD_MspInit+0x84>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <HAL_PCD_MspInit+0x84>)
 80006dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_PCD_MspInit+0x84>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40005c00 	.word	0x40005c00
 80006fc:	40021000 	.word	0x40021000

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <NMI_Handler+0x4>

08000708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <MemManage_Handler+0x4>

08000718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <UsageFault_Handler+0x4>

08000728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000756:	f000 f885 	bl	8000864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <SystemInit+0x20>)
 8000766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800076a:	4a05      	ldr	r2, [pc, #20]	@ (8000780 <SystemInit+0x20>)
 800076c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000784:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000788:	f7ff ffea 	bl	8000760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800078c:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800078e:	490d      	ldr	r1, [pc, #52]	@ (80007c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000790:	4a0d      	ldr	r2, [pc, #52]	@ (80007c8 <LoopForever+0xe>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0a      	ldr	r2, [pc, #40]	@ (80007cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a4:	4c0a      	ldr	r4, [pc, #40]	@ (80007d0 <LoopForever+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b2:	f002 f985 	bl	8002ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007b6:	f7ff fd07 	bl	80001c8 <main>

080007ba <LoopForever>:

LoopForever:
    b LoopForever
 80007ba:	e7fe      	b.n	80007ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007bc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007c8:	08002b58 	.word	0x08002b58
  ldr r2, =_sbss
 80007cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007d0:	200003b8 	.word	0x200003b8

080007d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC1_2_IRQHandler>
	...

080007d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <HAL_Init+0x28>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	@ (8000800 <HAL_Init+0x28>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f90d 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 f808 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff fe96 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40022000 	.word	0x40022000

08000804 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_InitTick+0x54>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <HAL_InitTick+0x58>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f917 	bl	8000a56 <HAL_SYSTICK_Config>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d80a      	bhi.n	800084e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f000 f8ed 	bl	8000a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000844:	4a06      	ldr	r2, [pc, #24]	@ (8000860 <HAL_InitTick+0x5c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	20000008 	.word	0x20000008
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <HAL_IncTick+0x20>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_IncTick+0x24>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <HAL_IncTick+0x24>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008
 8000888:	200003b4 	.word	0x200003b4

0800088c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000890:	4b03      	ldr	r3, [pc, #12]	@ (80008a0 <HAL_GetTick+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	200003b4 	.word	0x200003b4

080008a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d6:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	60d3      	str	r3, [r2, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <__NVIC_GetPriorityGrouping+0x18>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	f003 0307 	and.w	r3, r3, #7
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	@ (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	@ (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	@ 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	@ 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009d4:	d301      	bcc.n	80009da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00f      	b.n	80009fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <SysTick_Config+0x40>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e2:	210f      	movs	r1, #15
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f7ff ff8e 	bl	8000908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <SysTick_Config+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <SysTick_Config+0x40>)
 80009f4:	2207      	movs	r2, #7
 80009f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	e000e010 	.word	0xe000e010

08000a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff47 	bl	80008a4 <__NVIC_SetPriorityGrouping>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff5c 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ff8e 	bl	800095c <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff5d 	bl	8000908 <__NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ffb0 	bl	80009c4 <SysTick_Config>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7e:	e154      	b.n	8000d2a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	2101      	movs	r1, #1
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 8146 	beq.w	8000d24 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d005      	beq.n	8000ab0 <HAL_GPIO_Init+0x40>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d130      	bne.n	8000b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	f003 0201 	and.w	r2, r3, #1
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d017      	beq.n	8000b4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	2203      	movs	r2, #3
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 0303 	and.w	r3, r3, #3
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d123      	bne.n	8000ba2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	08da      	lsrs	r2, r3, #3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3208      	adds	r2, #8
 8000b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	220f      	movs	r2, #15
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	691a      	ldr	r2, [r3, #16]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	08da      	lsrs	r2, r3, #3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3208      	adds	r2, #8
 8000b9c:	6939      	ldr	r1, [r7, #16]
 8000b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2203      	movs	r2, #3
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0203 	and.w	r2, r3, #3
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 80a0 	beq.w	8000d24 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be4:	4b58      	ldr	r3, [pc, #352]	@ (8000d48 <HAL_GPIO_Init+0x2d8>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a57      	ldr	r2, [pc, #348]	@ (8000d48 <HAL_GPIO_Init+0x2d8>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b55      	ldr	r3, [pc, #340]	@ (8000d48 <HAL_GPIO_Init+0x2d8>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bfc:	4a53      	ldr	r2, [pc, #332]	@ (8000d4c <HAL_GPIO_Init+0x2dc>)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c26:	d019      	beq.n	8000c5c <HAL_GPIO_Init+0x1ec>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a49      	ldr	r2, [pc, #292]	@ (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d013      	beq.n	8000c58 <HAL_GPIO_Init+0x1e8>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a48      	ldr	r2, [pc, #288]	@ (8000d54 <HAL_GPIO_Init+0x2e4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d00d      	beq.n	8000c54 <HAL_GPIO_Init+0x1e4>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a47      	ldr	r2, [pc, #284]	@ (8000d58 <HAL_GPIO_Init+0x2e8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d007      	beq.n	8000c50 <HAL_GPIO_Init+0x1e0>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a46      	ldr	r2, [pc, #280]	@ (8000d5c <HAL_GPIO_Init+0x2ec>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d101      	bne.n	8000c4c <HAL_GPIO_Init+0x1dc>
 8000c48:	2304      	movs	r3, #4
 8000c4a:	e008      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c4c:	2305      	movs	r3, #5
 8000c4e:	e006      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c50:	2303      	movs	r3, #3
 8000c52:	e004      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e000      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	f002 0203 	and.w	r2, r2, #3
 8000c64:	0092      	lsls	r2, r2, #2
 8000c66:	4093      	lsls	r3, r2
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c6e:	4937      	ldr	r1, [pc, #220]	@ (8000d4c <HAL_GPIO_Init+0x2dc>)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3302      	adds	r3, #2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c7c:	4b38      	ldr	r3, [pc, #224]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cca:	4a25      	ldr	r2, [pc, #148]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cd0:	4b23      	ldr	r3, [pc, #140]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d1e:	4a10      	ldr	r2, [pc, #64]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa22 f303 	lsr.w	r3, r2, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f47f aea3 	bne.w	8000a80 <HAL_GPIO_Init+0x10>
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	371c      	adds	r7, #28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000
 8000d50:	48000400 	.word	0x48000400
 8000d54:	48000800 	.word	0x48000800
 8000d58:	48000c00 	.word	0x48000c00
 8000d5c:	48001000 	.word	0x48001000
 8000d60:	40010400 	.word	0x40010400

08000d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691a      	ldr	r2, [r3, #16]
 8000d74:	887b      	ldrh	r3, [r7, #2]
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e001      	b.n	8000d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
 8000da0:	4613      	mov	r3, r2
 8000da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000da4:	787b      	ldrb	r3, [r7, #1]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000daa:	887a      	ldrh	r2, [r7, #2]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db0:	e002      	b.n	8000db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000db2:	887a      	ldrh	r2, [r7, #2]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dd6:	887a      	ldrh	r2, [r7, #2]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	041a      	lsls	r2, r3, #16
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43d9      	mvns	r1, r3
 8000de2:	887b      	ldrh	r3, [r7, #2]
 8000de4:	400b      	ands	r3, r1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	619a      	str	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e08d      	b.n	8000f26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d106      	bne.n	8000e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fba4 	bl	800056c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2224      	movs	r2, #36	@ 0x24
 8000e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0201 	bic.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000e48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d107      	bne.n	8000e72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	e006      	b.n	8000e80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000e7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d108      	bne.n	8000e9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	e007      	b.n	8000eaa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000ea8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6812      	ldr	r2, [r2, #0]
 8000eb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ebc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ecc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69d9      	ldr	r1, [r3, #28]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a1a      	ldr	r2, [r3, #32]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0201 	orr.w	r2, r2, #1
 8000f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2220      	movs	r2, #32
 8000f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b20      	cmp	r3, #32
 8000f42:	d138      	bne.n	8000fb6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d101      	bne.n	8000f52 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e032      	b.n	8000fb8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2224      	movs	r2, #36	@ 0x24
 8000f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000f80:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6819      	ldr	r1, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f042 0201 	orr.w	r2, r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000fb6:	2302      	movs	r3, #2
  }
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b20      	cmp	r3, #32
 8000fd8:	d139      	bne.n	800104e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e033      	b.n	8001050 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2224      	movs	r2, #36	@ 0x24
 8000ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001016:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0201 	orr.w	r2, r2, #1
 8001038:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2220      	movs	r2, #32
 800103e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800104e:	2302      	movs	r3, #2
  }
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e0b9      	b.n	80011e2 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d106      	bne.n	8001088 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff faf8 	bl	8000678 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2203      	movs	r2, #3
 800108c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fcd2 	bl	8002a3e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e03e      	b.n	800111e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	3311      	adds	r3, #17
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	3310      	adds	r3, #16
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	3313      	adds	r3, #19
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	3320      	adds	r3, #32
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	3324      	adds	r3, #36	@ 0x24
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	791b      	ldrb	r3, [r3, #4]
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	429a      	cmp	r2, r3
 8001126:	d3bb      	bcc.n	80010a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e044      	b.n	80011b8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	440b      	add	r3, r1
 8001152:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	440b      	add	r3, r1
 8001168:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	440b      	add	r3, r1
 8001194:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	440b      	add	r3, r1
 80011aa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	3301      	adds	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d3b5      	bcc.n	800112e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3304      	adds	r3, #4
 80011ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80011ce:	f001 fc51 	bl	8002a74 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011fc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001202:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	f000 bff4 	b.w	80021fa <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001216:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 816d 	beq.w	8001502 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001228:	4bb4      	ldr	r3, [pc, #720]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b04      	cmp	r3, #4
 8001232:	d00c      	beq.n	800124e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001234:	4bb1      	ldr	r3, [pc, #708]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d157      	bne.n	80012f0 <HAL_RCC_OscConfig+0x104>
 8001240:	4bae      	ldr	r3, [pc, #696]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800124c:	d150      	bne.n	80012f0 <HAL_RCC_OscConfig+0x104>
 800124e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001252:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001256:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800125a:	fa93 f3a3 	rbit	r3, r3
 800125e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001262:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b3f      	cmp	r3, #63	@ 0x3f
 800126e:	d802      	bhi.n	8001276 <HAL_RCC_OscConfig+0x8a>
 8001270:	4ba2      	ldr	r3, [pc, #648]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0xb6>
 8001276:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800127a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800128a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800128e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001292:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800129e:	4b97      	ldr	r3, [pc, #604]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 80012a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012a6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80012aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80012ae:	fa92 f2a2 	rbit	r2, r2
 80012b2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80012b6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80012ba:	fab2 f282 	clz	r2, r2
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	f042 0220 	orr.w	r2, r2, #32
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	f002 021f 	and.w	r2, r2, #31
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 8114 	beq.w	8001500 <HAL_RCC_OscConfig+0x314>
 80012d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f040 810b 	bne.w	8001500 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	f000 bf85 	b.w	80021fa <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001300:	d106      	bne.n	8001310 <HAL_RCC_OscConfig+0x124>
 8001302:	4b7e      	ldr	r3, [pc, #504]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a7d      	ldr	r2, [pc, #500]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e036      	b.n	800137e <HAL_RCC_OscConfig+0x192>
 8001310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001314:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10c      	bne.n	800133a <HAL_RCC_OscConfig+0x14e>
 8001320:	4b76      	ldr	r3, [pc, #472]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a75      	ldr	r2, [pc, #468]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b73      	ldr	r3, [pc, #460]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a72      	ldr	r2, [pc, #456]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e021      	b.n	800137e <HAL_RCC_OscConfig+0x192>
 800133a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800133e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800134a:	d10c      	bne.n	8001366 <HAL_RCC_OscConfig+0x17a>
 800134c:	4b6b      	ldr	r3, [pc, #428]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a6a      	ldr	r2, [pc, #424]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001352:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b68      	ldr	r3, [pc, #416]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a67      	ldr	r2, [pc, #412]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 800135e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	e00b      	b.n	800137e <HAL_RCC_OscConfig+0x192>
 8001366:	4b65      	ldr	r3, [pc, #404]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a64      	ldr	r2, [pc, #400]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 800136c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b62      	ldr	r3, [pc, #392]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a61      	ldr	r2, [pc, #388]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001378:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800137c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800137e:	4b5f      	ldr	r3, [pc, #380]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001382:	f023 020f 	bic.w	r2, r3, #15
 8001386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800138a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	495a      	ldr	r1, [pc, #360]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001394:	4313      	orrs	r3, r2
 8001396:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800139c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d054      	beq.n	8001452 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fa70 	bl	800088c <HAL_GetTick>
 80013ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b2:	f7ff fa6b 	bl	800088c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	@ 0x64
 80013c0:	d902      	bls.n	80013c8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	f000 bf19 	b.w	80021fa <HAL_RCC_OscConfig+0x100e>
 80013c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013cc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80013d4:	fa93 f3a3 	rbit	r3, r3
 80013d8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80013dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80013e8:	d802      	bhi.n	80013f0 <HAL_RCC_OscConfig+0x204>
 80013ea:	4b44      	ldr	r3, [pc, #272]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	e015      	b.n	800141c <HAL_RCC_OscConfig+0x230>
 80013f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013f4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80013fc:	fa93 f3a3 	rbit	r3, r3
 8001400:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001404:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001408:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800140c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001418:	4b38      	ldr	r3, [pc, #224]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001420:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001424:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001428:	fa92 f2a2 	rbit	r2, r2
 800142c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001430:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001434:	fab2 f282 	clz	r2, r2
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	f042 0220 	orr.w	r2, r2, #32
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	f002 021f 	and.w	r2, r2, #31
 8001444:	2101      	movs	r1, #1
 8001446:	fa01 f202 	lsl.w	r2, r1, r2
 800144a:	4013      	ands	r3, r2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0b0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1c6>
 8001450:	e057      	b.n	8001502 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fa1b 	bl	800088c <HAL_GetTick>
 8001456:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fa16 	bl	800088c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	@ 0x64
 800146a:	d902      	bls.n	8001472 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	f000 bec4 	b.w	80021fa <HAL_RCC_OscConfig+0x100e>
 8001472:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001476:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800147e:	fa93 f3a3 	rbit	r3, r3
 8001482:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001486:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b3f      	cmp	r3, #63	@ 0x3f
 8001492:	d802      	bhi.n	800149a <HAL_RCC_OscConfig+0x2ae>
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	e015      	b.n	80014c6 <HAL_RCC_OscConfig+0x2da>
 800149a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800149e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80014ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014b2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80014b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <HAL_RCC_OscConfig+0x310>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014ca:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80014ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80014d2:	fa92 f2a2 	rbit	r2, r2
 80014d6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80014da:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80014de:	fab2 f282 	clz	r2, r2
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	f042 0220 	orr.w	r2, r2, #32
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	f002 021f 	and.w	r2, r2, #31
 80014ee:	2101      	movs	r1, #1
 80014f0:	fa01 f202 	lsl.w	r2, r1, r2
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1b0      	bne.n	800145c <HAL_RCC_OscConfig+0x270>
 80014fa:	e002      	b.n	8001502 <HAL_RCC_OscConfig+0x316>
 80014fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001506:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 816c 	beq.w	80017f0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001518:	4bcc      	ldr	r3, [pc, #816]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00b      	beq.n	800153c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001524:	4bc9      	ldr	r3, [pc, #804]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b08      	cmp	r3, #8
 800152e:	d16d      	bne.n	800160c <HAL_RCC_OscConfig+0x420>
 8001530:	4bc6      	ldr	r3, [pc, #792]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d167      	bne.n	800160c <HAL_RCC_OscConfig+0x420>
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800154e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b3f      	cmp	r3, #63	@ 0x3f
 800155a:	d802      	bhi.n	8001562 <HAL_RCC_OscConfig+0x376>
 800155c:	4bbb      	ldr	r3, [pc, #748]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	e013      	b.n	800158a <HAL_RCC_OscConfig+0x39e>
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800157a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800157e:	fa93 f3a3 	rbit	r3, r3
 8001582:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001586:	4bb1      	ldr	r3, [pc, #708]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 8001588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158a:	2202      	movs	r2, #2
 800158c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001590:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001594:	fa92 f2a2 	rbit	r2, r2
 8001598:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800159c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80015a0:	fab2 f282 	clz	r2, r2
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	f042 0220 	orr.w	r2, r2, #32
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	f002 021f 	and.w	r2, r2, #31
 80015b0:	2101      	movs	r1, #1
 80015b2:	fa01 f202 	lsl.w	r2, r1, r2
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00a      	beq.n	80015d2 <HAL_RCC_OscConfig+0x3e6>
 80015bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d002      	beq.n	80015d2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f000 be14 	b.w	80021fa <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d2:	4b9e      	ldr	r3, [pc, #632]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	21f8      	movs	r1, #248	@ 0xf8
 80015e8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80015f0:	fa91 f1a1 	rbit	r1, r1
 80015f4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80015f8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80015fc:	fab1 f181 	clz	r1, r1
 8001600:	b2c9      	uxtb	r1, r1
 8001602:	408b      	lsls	r3, r1
 8001604:	4991      	ldr	r1, [pc, #580]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	e0f1      	b.n	80017f0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800160c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001610:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8083 	beq.w	8001724 <HAL_RCC_OscConfig+0x538>
 800161e:	2301      	movs	r3, #1
 8001620:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001630:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	fab3 f383 	clz	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800163e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	461a      	mov	r2, r3
 8001646:	2301      	movs	r3, #1
 8001648:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff f91f 	bl	800088c <HAL_GetTick>
 800164e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff f91a 	bl	800088c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d902      	bls.n	800166a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	f000 bdc8 	b.w	80021fa <HAL_RCC_OscConfig+0x100e>
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800167c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b3f      	cmp	r3, #63	@ 0x3f
 8001688:	d802      	bhi.n	8001690 <HAL_RCC_OscConfig+0x4a4>
 800168a:	4b70      	ldr	r3, [pc, #448]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	e013      	b.n	80016b8 <HAL_RCC_OscConfig+0x4cc>
 8001690:	2302      	movs	r3, #2
 8001692:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001696:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800169a:	fa93 f3a3 	rbit	r3, r3
 800169e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80016a2:	2302      	movs	r3, #2
 80016a4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80016a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80016ac:	fa93 f3a3 	rbit	r3, r3
 80016b0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80016b4:	4b65      	ldr	r3, [pc, #404]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b8:	2202      	movs	r2, #2
 80016ba:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80016be:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80016c2:	fa92 f2a2 	rbit	r2, r2
 80016c6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80016ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80016ce:	fab2 f282 	clz	r2, r2
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	f042 0220 	orr.w	r2, r2, #32
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	f002 021f 	and.w	r2, r2, #31
 80016de:	2101      	movs	r1, #1
 80016e0:	fa01 f202 	lsl.w	r2, r1, r2
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0b4      	beq.n	8001654 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4b58      	ldr	r3, [pc, #352]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	21f8      	movs	r1, #248	@ 0xf8
 8001700:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001708:	fa91 f1a1 	rbit	r1, r1
 800170c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001710:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001714:	fab1 f181 	clz	r1, r1
 8001718:	b2c9      	uxtb	r1, r1
 800171a:	408b      	lsls	r3, r1
 800171c:	494b      	ldr	r1, [pc, #300]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
 8001722:	e065      	b.n	80017f0 <HAL_RCC_OscConfig+0x604>
 8001724:	2301      	movs	r3, #1
 8001726:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800172e:	fa93 f3a3 	rbit	r3, r3
 8001732:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001736:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001744:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	461a      	mov	r2, r3
 800174c:	2300      	movs	r3, #0
 800174e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff f89c 	bl	800088c <HAL_GetTick>
 8001754:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff f897 	bl	800088c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d902      	bls.n	8001770 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	f000 bd45 	b.w	80021fa <HAL_RCC_OscConfig+0x100e>
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001782:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	fab3 f383 	clz	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b3f      	cmp	r3, #63	@ 0x3f
 800178e:	d802      	bhi.n	8001796 <HAL_RCC_OscConfig+0x5aa>
 8001790:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	e013      	b.n	80017be <HAL_RCC_OscConfig+0x5d2>
 8001796:	2302      	movs	r3, #2
 8001798:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80017ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80017ba:	4b24      	ldr	r3, [pc, #144]	@ (800184c <HAL_RCC_OscConfig+0x660>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	2202      	movs	r2, #2
 80017c0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80017c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80017c8:	fa92 f2a2 	rbit	r2, r2
 80017cc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80017d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80017d4:	fab2 f282 	clz	r2, r2
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	f042 0220 	orr.w	r2, r2, #32
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f002 021f 	and.w	r2, r2, #31
 80017e4:	2101      	movs	r1, #1
 80017e6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1b4      	bne.n	800175a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 8115 	beq.w	8001a30 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d07e      	beq.n	8001914 <HAL_RCC_OscConfig+0x728>
 8001816:	2301      	movs	r3, #1
 8001818:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_RCC_OscConfig+0x664>)
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	461a      	mov	r2, r3
 800183c:	2301      	movs	r3, #1
 800183e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001840:	f7ff f824 	bl	800088c <HAL_GetTick>
 8001844:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001848:	e00f      	b.n	800186a <HAL_RCC_OscConfig+0x67e>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff f81a 	bl	800088c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d902      	bls.n	800186a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	f000 bcc8 	b.w	80021fa <HAL_RCC_OscConfig+0x100e>
 800186a:	2302      	movs	r3, #2
 800186c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800187c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001880:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001884:	2202      	movs	r2, #2
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	fa93 f2a3 	rbit	r2, r3
 8001896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018a8:	2202      	movs	r2, #2
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c4:	4bb0      	ldr	r3, [pc, #704]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 80018c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80018d0:	2102      	movs	r1, #2
 80018d2:	6019      	str	r1, [r3, #0]
 80018d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fa93 f1a3 	rbit	r1, r3
 80018e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018ea:	6019      	str	r1, [r3, #0]
  return result;
 80018ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	2101      	movs	r1, #1
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0a0      	beq.n	8001854 <HAL_RCC_OscConfig+0x668>
 8001912:	e08d      	b.n	8001a30 <HAL_RCC_OscConfig+0x844>
 8001914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001918:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001924:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	fa93 f2a3 	rbit	r2, r3
 800192e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001932:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001936:	601a      	str	r2, [r3, #0]
  return result;
 8001938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001940:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	4b90      	ldr	r3, [pc, #576]	@ (8001b8c <HAL_RCC_OscConfig+0x9a0>)
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	461a      	mov	r2, r3
 8001952:	2300      	movs	r3, #0
 8001954:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7fe ff99 	bl	800088c <HAL_GetTick>
 800195a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001960:	f7fe ff94 	bl	800088c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d902      	bls.n	8001976 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	f000 bc42 	b.w	80021fa <HAL_RCC_OscConfig+0x100e>
 8001976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800197e:	2202      	movs	r2, #2
 8001980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001986:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	fa93 f2a3 	rbit	r2, r3
 8001990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001994:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019a2:	2202      	movs	r2, #2
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fa93 f2a3 	rbit	r2, r3
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80019c6:	2202      	movs	r2, #2
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e2:	4b69      	ldr	r3, [pc, #420]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 80019e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019ee:	2102      	movs	r1, #2
 80019f0:	6019      	str	r1, [r3, #0]
 80019f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f1a3 	rbit	r1, r3
 8001a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a04:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a08:	6019      	str	r1, [r3, #0]
  return result;
 8001a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	2101      	movs	r1, #1
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d197      	bne.n	8001960 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 819e 	beq.w	8001d82 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d116      	bne.n	8001a86 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a58:	4b4b      	ldr	r3, [pc, #300]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	61d3      	str	r3, [r2, #28]
 8001a64:	4b48      	ldr	r3, [pc, #288]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a70:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001a7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a86:	4b42      	ldr	r3, [pc, #264]	@ (8001b90 <HAL_RCC_OscConfig+0x9a4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d11a      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a92:	4b3f      	ldr	r3, [pc, #252]	@ (8001b90 <HAL_RCC_OscConfig+0x9a4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a3e      	ldr	r2, [pc, #248]	@ (8001b90 <HAL_RCC_OscConfig+0x9a4>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a9e:	f7fe fef5 	bl	800088c <HAL_GetTick>
 8001aa2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	e009      	b.n	8001abc <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa8:	f7fe fef0 	bl	800088c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b64      	cmp	r3, #100	@ 0x64
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e39e      	b.n	80021fa <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	4b34      	ldr	r3, [pc, #208]	@ (8001b90 <HAL_RCC_OscConfig+0x9a4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ef      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001acc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d106      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x8fa>
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4a2a      	ldr	r2, [pc, #168]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6213      	str	r3, [r2, #32]
 8001ae4:	e035      	b.n	8001b52 <HAL_RCC_OscConfig+0x966>
 8001ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x924>
 8001af6:	4b24      	ldr	r3, [pc, #144]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a23      	ldr	r2, [pc, #140]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6213      	str	r3, [r2, #32]
 8001b02:	4b21      	ldr	r3, [pc, #132]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a20      	ldr	r2, [pc, #128]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6213      	str	r3, [r2, #32]
 8001b0e:	e020      	b.n	8001b52 <HAL_RCC_OscConfig+0x966>
 8001b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d10c      	bne.n	8001b3a <HAL_RCC_OscConfig+0x94e>
 8001b20:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4a18      	ldr	r2, [pc, #96]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	6213      	str	r3, [r2, #32]
 8001b2c:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a15      	ldr	r2, [pc, #84]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	e00b      	b.n	8001b52 <HAL_RCC_OscConfig+0x966>
 8001b3a:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4a12      	ldr	r2, [pc, #72]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	6213      	str	r3, [r2, #32]
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <HAL_RCC_OscConfig+0x99c>)
 8001b4c:	f023 0304 	bic.w	r3, r3, #4
 8001b50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8087 	beq.w	8001c72 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7fe fe92 	bl	800088c <HAL_GetTick>
 8001b68:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	e012      	b.n	8001b94 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7fe fe8d 	bl	800088c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d908      	bls.n	8001b94 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e339      	b.n	80021fa <HAL_RCC_OscConfig+0x100e>
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	10908120 	.word	0x10908120
 8001b90:	40007000 	.word	0x40007000
 8001b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b98:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	fa93 f2a3 	rbit	r2, r3
 8001bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001bda:	601a      	str	r2, [r3, #0]
  return result;
 8001bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001be4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <HAL_RCC_OscConfig+0xa10>
 8001bf6:	4b98      	ldr	r3, [pc, #608]	@ (8001e58 <HAL_RCC_OscConfig+0xc6c>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	e013      	b.n	8001c24 <HAL_RCC_OscConfig+0xa38>
 8001bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c00:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c04:	2202      	movs	r2, #2
 8001c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	fa93 f2a3 	rbit	r2, r3
 8001c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	4b8d      	ldr	r3, [pc, #564]	@ (8001e58 <HAL_RCC_OscConfig+0xc6c>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c28:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	6011      	str	r1, [r2, #0]
 8001c30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c34:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	fa92 f1a2 	rbit	r1, r2
 8001c3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c42:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c46:	6011      	str	r1, [r2, #0]
  return result;
 8001c48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c4c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	fab2 f282 	clz	r2, r2
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	f002 021f 	and.w	r2, r2, #31
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f202 	lsl.w	r2, r1, r2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f43f af7f 	beq.w	8001b6e <HAL_RCC_OscConfig+0x982>
 8001c70:	e07d      	b.n	8001d6e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7fe fe0b 	bl	800088c <HAL_GetTick>
 8001c76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7c:	f7fe fe06 	bl	800088c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e2b2      	b.n	80021fa <HAL_RCC_OscConfig+0x100e>
 8001c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c98:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001cda:	601a      	str	r2, [r3, #0]
  return result;
 8001cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ce4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <HAL_RCC_OscConfig+0xb10>
 8001cf6:	4b58      	ldr	r3, [pc, #352]	@ (8001e58 <HAL_RCC_OscConfig+0xc6c>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	e013      	b.n	8001d24 <HAL_RCC_OscConfig+0xb38>
 8001cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d00:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d04:	2202      	movs	r2, #2
 8001d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fa93 f2a3 	rbit	r2, r3
 8001d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	4b4d      	ldr	r3, [pc, #308]	@ (8001e58 <HAL_RCC_OscConfig+0xc6c>)
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d28:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	6011      	str	r1, [r2, #0]
 8001d30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d34:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	fa92 f1a2 	rbit	r1, r2
 8001d3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d42:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d46:	6011      	str	r1, [r2, #0]
  return result;
 8001d48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d4c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	f002 021f 	and.w	r2, r2, #31
 8001d62:	2101      	movs	r1, #1
 8001d64:	fa01 f202 	lsl.w	r2, r1, r2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d186      	bne.n	8001c7c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d6e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d105      	bne.n	8001d82 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d76:	4b38      	ldr	r3, [pc, #224]	@ (8001e58 <HAL_RCC_OscConfig+0xc6c>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a37      	ldr	r2, [pc, #220]	@ (8001e58 <HAL_RCC_OscConfig+0xc6c>)
 8001d7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8232 	beq.w	80021f8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d94:	4b30      	ldr	r3, [pc, #192]	@ (8001e58 <HAL_RCC_OscConfig+0xc6c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	f000 8201 	beq.w	80021a4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	f040 8157 	bne.w	8002062 <HAL_RCC_OscConfig+0xe76>
 8001db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001dbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fa93 f2a3 	rbit	r2, r3
 8001dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001dd8:	601a      	str	r2, [r3, #0]
  return result;
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001de2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001dee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	461a      	mov	r2, r3
 8001df6:	2300      	movs	r3, #0
 8001df8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7fe fd47 	bl	800088c <HAL_GetTick>
 8001dfe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e02:	e009      	b.n	8001e18 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e04:	f7fe fd42 	bl	800088c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1f0      	b.n	80021fa <HAL_RCC_OscConfig+0x100e>
 8001e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fa93 f2a3 	rbit	r2, r3
 8001e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e38:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e3c:	601a      	str	r2, [r3, #0]
  return result;
 8001e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e42:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e50:	d804      	bhi.n	8001e5c <HAL_RCC_OscConfig+0xc70>
 8001e52:	4b01      	ldr	r3, [pc, #4]	@ (8001e58 <HAL_RCC_OscConfig+0xc6c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	e029      	b.n	8001eac <HAL_RCC_OscConfig+0xcc0>
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e60:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fa93 f2a3 	rbit	r2, r3
 8001e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e86:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e94:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fa93 f2a3 	rbit	r2, r3
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4bc3      	ldr	r3, [pc, #780]	@ (80021b8 <HAL_RCC_OscConfig+0xfcc>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eb0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001eb4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001eb8:	6011      	str	r1, [r2, #0]
 8001eba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ebe:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	fa92 f1a2 	rbit	r1, r2
 8001ec8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ecc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001ed0:	6011      	str	r1, [r2, #0]
  return result;
 8001ed2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ed6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	fab2 f282 	clz	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f002 021f 	and.w	r2, r2, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d185      	bne.n	8001e04 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef8:	4baf      	ldr	r3, [pc, #700]	@ (80021b8 <HAL_RCC_OscConfig+0xfcc>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	49a7      	ldr	r1, [pc, #668]	@ (80021b8 <HAL_RCC_OscConfig+0xfcc>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
 8001f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f24:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001f28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f32:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	fa93 f2a3 	rbit	r2, r3
 8001f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f40:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f44:	601a      	str	r2, [r3, #0]
  return result;
 8001f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f4e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	461a      	mov	r2, r3
 8001f62:	2301      	movs	r3, #1
 8001f64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe fc91 	bl	800088c <HAL_GetTick>
 8001f6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6e:	e009      	b.n	8001f84 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe fc8c 	bl	800088c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e13a      	b.n	80021fa <HAL_RCC_OscConfig+0x100e>
 8001f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f88:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f96:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	fa93 f2a3 	rbit	r2, r3
 8001fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001fa8:	601a      	str	r2, [r3, #0]
  return result;
 8001faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fae:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001fb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb4:	fab3 f383 	clz	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fbc:	d802      	bhi.n	8001fc4 <HAL_RCC_OscConfig+0xdd8>
 8001fbe:	4b7e      	ldr	r3, [pc, #504]	@ (80021b8 <HAL_RCC_OscConfig+0xfcc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	e027      	b.n	8002014 <HAL_RCC_OscConfig+0xe28>
 8001fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001fcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	fa93 f2a3 	rbit	r2, r3
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fee:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001ff2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	4b69      	ldr	r3, [pc, #420]	@ (80021b8 <HAL_RCC_OscConfig+0xfcc>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002018:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800201c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002020:	6011      	str	r1, [r2, #0]
 8002022:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002026:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	fa92 f1a2 	rbit	r1, r2
 8002030:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002034:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002038:	6011      	str	r1, [r2, #0]
  return result;
 800203a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800203e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	fab2 f282 	clz	r2, r2
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	f042 0220 	orr.w	r2, r2, #32
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	f002 021f 	and.w	r2, r2, #31
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f202 	lsl.w	r2, r1, r2
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d087      	beq.n	8001f70 <HAL_RCC_OscConfig+0xd84>
 8002060:	e0ca      	b.n	80021f8 <HAL_RCC_OscConfig+0x100c>
 8002062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002066:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800206a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800206e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002074:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002082:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002086:	601a      	str	r2, [r3, #0]
  return result;
 8002088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002090:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800209c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	461a      	mov	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe fbf0 	bl	800088c <HAL_GetTick>
 80020ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b0:	e009      	b.n	80020c6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe fbeb 	bl	800088c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e099      	b.n	80021fa <HAL_RCC_OscConfig+0x100e>
 80020c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ca:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80020ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80020ea:	601a      	str	r2, [r3, #0]
  return result;
 80020ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80020f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80020fe:	d802      	bhi.n	8002106 <HAL_RCC_OscConfig+0xf1a>
 8002100:	4b2d      	ldr	r3, [pc, #180]	@ (80021b8 <HAL_RCC_OscConfig+0xfcc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	e027      	b.n	8002156 <HAL_RCC_OscConfig+0xf6a>
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800210e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002118:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f2a3 	rbit	r2, r3
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002134:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f2a3 	rbit	r2, r3
 8002148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <HAL_RCC_OscConfig+0xfcc>)
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800215a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800215e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002162:	6011      	str	r1, [r2, #0]
 8002164:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002168:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	fa92 f1a2 	rbit	r1, r2
 8002172:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002176:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800217a:	6011      	str	r1, [r2, #0]
  return result;
 800217c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002180:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	fab2 f282 	clz	r2, r2
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f042 0220 	orr.w	r2, r2, #32
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	f002 021f 	and.w	r2, r2, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d187      	bne.n	80020b2 <HAL_RCC_OscConfig+0xec6>
 80021a2:	e029      	b.n	80021f8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d103      	bne.n	80021bc <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e020      	b.n	80021fa <HAL_RCC_OscConfig+0x100e>
 80021b8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021bc:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <HAL_RCC_OscConfig+0x1018>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80021c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10b      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80021dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80021e0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b09e      	sub	sp, #120	@ 0x78
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e154      	b.n	80024ca <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002220:	4b89      	ldr	r3, [pc, #548]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d910      	bls.n	8002250 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b86      	ldr	r3, [pc, #536]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 0207 	bic.w	r2, r3, #7
 8002236:	4984      	ldr	r1, [pc, #528]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b82      	ldr	r3, [pc, #520]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e13c      	b.n	80024ca <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225c:	4b7b      	ldr	r3, [pc, #492]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4978      	ldr	r1, [pc, #480]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 800226a:	4313      	orrs	r3, r2
 800226c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 80cd 	beq.w	8002416 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d137      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xec>
 8002284:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002288:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002292:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b3f      	cmp	r3, #63	@ 0x3f
 800229c:	d802      	bhi.n	80022a4 <HAL_RCC_ClockConfig+0x9c>
 800229e:	4b6b      	ldr	r3, [pc, #428]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	e00f      	b.n	80022c4 <HAL_RCC_ClockConfig+0xbc>
 80022a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80022b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80022b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022c0:	4b62      	ldr	r3, [pc, #392]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80022ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80022cc:	fa92 f2a2 	rbit	r2, r2
 80022d0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80022d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f002 021f 	and.w	r2, r2, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d171      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0ea      	b.n	80024ca <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d137      	bne.n	800236c <HAL_RCC_ClockConfig+0x164>
 80022fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002300:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800230a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b3f      	cmp	r3, #63	@ 0x3f
 8002314:	d802      	bhi.n	800231c <HAL_RCC_ClockConfig+0x114>
 8002316:	4b4d      	ldr	r3, [pc, #308]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	e00f      	b.n	800233c <HAL_RCC_ClockConfig+0x134>
 800231c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002320:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	647b      	str	r3, [r7, #68]	@ 0x44
 800232a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800232e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002338:	4b44      	ldr	r3, [pc, #272]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002340:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002342:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002344:	fa92 f2a2 	rbit	r2, r2
 8002348:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800234a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800234c:	fab2 f282 	clz	r2, r2
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f042 0220 	orr.w	r2, r2, #32
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	f002 021f 	and.w	r2, r2, #31
 800235c:	2101      	movs	r1, #1
 800235e:	fa01 f202 	lsl.w	r2, r1, r2
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d135      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0ae      	b.n	80024ca <HAL_RCC_ClockConfig+0x2c2>
 800236c:	2302      	movs	r3, #2
 800236e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b3f      	cmp	r3, #63	@ 0x3f
 8002382:	d802      	bhi.n	800238a <HAL_RCC_ClockConfig+0x182>
 8002384:	4b31      	ldr	r3, [pc, #196]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	e00d      	b.n	80023a6 <HAL_RCC_ClockConfig+0x19e>
 800238a:	2302      	movs	r3, #2
 800238c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
 8002396:	2302      	movs	r3, #2
 8002398:	623b      	str	r3, [r7, #32]
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	4b2a      	ldr	r3, [pc, #168]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	2202      	movs	r2, #2
 80023a8:	61ba      	str	r2, [r7, #24]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	fa92 f2a2 	rbit	r2, r2
 80023b0:	617a      	str	r2, [r7, #20]
  return result;
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	fab2 f282 	clz	r2, r2
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	f042 0220 	orr.w	r2, r2, #32
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	f002 021f 	and.w	r2, r2, #31
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e07a      	b.n	80024ca <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d4:	4b1d      	ldr	r3, [pc, #116]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f023 0203 	bic.w	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	491a      	ldr	r1, [pc, #104]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e6:	f7fe fa51 	bl	800088c <HAL_GetTick>
 80023ea:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ee:	f7fe fa4d 	bl	800088c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e062      	b.n	80024ca <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002404:	4b11      	ldr	r3, [pc, #68]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 020c 	and.w	r2, r3, #12
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	429a      	cmp	r2, r3
 8002414:	d1eb      	bne.n	80023ee <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002416:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d215      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002424:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 0207 	bic.w	r2, r3, #7
 800242c:	4906      	ldr	r1, [pc, #24]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002434:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d006      	beq.n	8002450 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e041      	b.n	80024ca <HAL_RCC_ClockConfig+0x2c2>
 8002446:	bf00      	nop
 8002448:	40022000 	.word	0x40022000
 800244c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <HAL_RCC_ClockConfig+0x2cc>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	491a      	ldr	r1, [pc, #104]	@ (80024d4 <HAL_RCC_ClockConfig+0x2cc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247a:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <HAL_RCC_ClockConfig+0x2cc>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4912      	ldr	r1, [pc, #72]	@ (80024d4 <HAL_RCC_ClockConfig+0x2cc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800248e:	f000 f829 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8002492:	4601      	mov	r1, r0
 8002494:	4b0f      	ldr	r3, [pc, #60]	@ (80024d4 <HAL_RCC_ClockConfig+0x2cc>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800249c:	22f0      	movs	r2, #240	@ 0xf0
 800249e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	fa92 f2a2 	rbit	r2, r2
 80024a6:	60fa      	str	r2, [r7, #12]
  return result;
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	fab2 f282 	clz	r2, r2
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	40d3      	lsrs	r3, r2
 80024b2:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <HAL_RCC_ClockConfig+0x2d0>)
 80024b4:	5cd3      	ldrb	r3, [r2, r3]
 80024b6:	fa21 f303 	lsr.w	r3, r1, r3
 80024ba:	4a08      	ldr	r2, [pc, #32]	@ (80024dc <HAL_RCC_ClockConfig+0x2d4>)
 80024bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024be:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <HAL_RCC_ClockConfig+0x2d8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe f99e 	bl	8000804 <HAL_InitTick>
  
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3778      	adds	r7, #120	@ 0x78
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	08002b20 	.word	0x08002b20
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80024fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x94>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b04      	cmp	r3, #4
 800250c:	d002      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x30>
 800250e:	2b08      	cmp	r3, #8
 8002510:	d003      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x36>
 8002512:	e026      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <HAL_RCC_GetSysClockFreq+0x98>)
 8002516:	613b      	str	r3, [r7, #16]
      break;
 8002518:	e026      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	0c9b      	lsrs	r3, r3, #18
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	4a17      	ldr	r2, [pc, #92]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002524:	5cd3      	ldrb	r3, [r2, r3]
 8002526:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002528:	4b13      	ldr	r3, [pc, #76]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x94>)
 800252a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002540:	4a0e      	ldr	r2, [pc, #56]	@ (800257c <HAL_RCC_GetSysClockFreq+0x98>)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	fbb2 f2f3 	udiv	r2, r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	e004      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a0c      	ldr	r2, [pc, #48]	@ (8002588 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002556:	fb02 f303 	mul.w	r3, r2, r3
 800255a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	613b      	str	r3, [r7, #16]
      break;
 8002560:	e002      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_RCC_GetSysClockFreq+0x98>)
 8002564:	613b      	str	r3, [r7, #16]
      break;
 8002566:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002568:	693b      	ldr	r3, [r7, #16]
}
 800256a:	4618      	mov	r0, r3
 800256c:	371c      	adds	r7, #28
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	007a1200 	.word	0x007a1200
 8002580:	08002b30 	.word	0x08002b30
 8002584:	08002b40 	.word	0x08002b40
 8002588:	003d0900 	.word	0x003d0900

0800258c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b092      	sub	sp, #72	@ 0x48
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800259c:	2300      	movs	r3, #0
 800259e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80d2 	beq.w	8002754 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b0:	4b4d      	ldr	r3, [pc, #308]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10e      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025bc:	4b4a      	ldr	r3, [pc, #296]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	4a49      	ldr	r2, [pc, #292]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	61d3      	str	r3, [r2, #28]
 80025c8:	4b47      	ldr	r3, [pc, #284]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b44      	ldr	r3, [pc, #272]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d118      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e6:	4b41      	ldr	r3, [pc, #260]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a40      	ldr	r2, [pc, #256]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f2:	f7fe f94b 	bl	800088c <HAL_GetTick>
 80025f6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	e008      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fa:	f7fe f947 	bl	800088c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b64      	cmp	r3, #100	@ 0x64
 8002606:	d901      	bls.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e167      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	4b37      	ldr	r3, [pc, #220]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002618:	4b33      	ldr	r3, [pc, #204]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002620:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8082 	beq.w	800272e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002632:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002634:	429a      	cmp	r2, r3
 8002636:	d07a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002638:	4b2b      	ldr	r3, [pc, #172]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002642:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002646:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	4b25      	ldr	r3, [pc, #148]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	461a      	mov	r2, r3
 8002662:	2301      	movs	r3, #1
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800266a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	4b1c      	ldr	r3, [pc, #112]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	461a      	mov	r2, r3
 8002686:	2300      	movs	r3, #0
 8002688:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800268a:	4a17      	ldr	r2, [pc, #92]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800268c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800268e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d049      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269a:	f7fe f8f7 	bl	800088c <HAL_GetTick>
 800269e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fe f8f3 	bl	800088c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e111      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x350>
 80026b8:	2302      	movs	r3, #2
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c4:	2302      	movs	r3, #2
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	61fb      	str	r3, [r7, #28]
  return result;
 80026d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d108      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80026e2:	4b01      	ldr	r3, [pc, #4]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	e00d      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40007000 	.word	0x40007000
 80026f0:	10908100 	.word	0x10908100
 80026f4:	2302      	movs	r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	4b78      	ldr	r3, [pc, #480]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	2202      	movs	r2, #2
 8002706:	613a      	str	r2, [r7, #16]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	fa92 f2a2 	rbit	r2, r2
 800270e:	60fa      	str	r2, [r7, #12]
  return result;
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	fab2 f282 	clz	r2, r2
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	f002 021f 	and.w	r2, r2, #31
 8002722:	2101      	movs	r1, #1
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0b9      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800272e:	4b6d      	ldr	r3, [pc, #436]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	496a      	ldr	r1, [pc, #424]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800273c:	4313      	orrs	r3, r2
 800273e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002740:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4b66      	ldr	r3, [pc, #408]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	4a65      	ldr	r2, [pc, #404]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002752:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002760:	4b60      	ldr	r3, [pc, #384]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002764:	f023 0203 	bic.w	r2, r3, #3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	495d      	ldr	r1, [pc, #372]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800276e:	4313      	orrs	r3, r2
 8002770:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800277e:	4b59      	ldr	r3, [pc, #356]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4956      	ldr	r1, [pc, #344]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800278c:	4313      	orrs	r3, r2
 800278e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800279c:	4b51      	ldr	r3, [pc, #324]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	494e      	ldr	r1, [pc, #312]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ba:	4b4a      	ldr	r3, [pc, #296]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	f023 0210 	bic.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4947      	ldr	r1, [pc, #284]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80027d8:	4b42      	ldr	r3, [pc, #264]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e4:	493f      	ldr	r1, [pc, #252]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027f6:	4b3b      	ldr	r3, [pc, #236]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f023 0220 	bic.w	r2, r3, #32
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4938      	ldr	r1, [pc, #224]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002804:	4313      	orrs	r3, r2
 8002806:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002814:	4b33      	ldr	r3, [pc, #204]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	4930      	ldr	r1, [pc, #192]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002822:	4313      	orrs	r3, r2
 8002824:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002832:	4b2c      	ldr	r3, [pc, #176]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	4929      	ldr	r1, [pc, #164]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002840:	4313      	orrs	r3, r2
 8002842:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002850:	4b24      	ldr	r3, [pc, #144]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	4921      	ldr	r1, [pc, #132]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800286e:	4b1d      	ldr	r3, [pc, #116]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	491a      	ldr	r1, [pc, #104]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800287c:	4313      	orrs	r3, r2
 800287e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800288c:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002898:	4912      	ldr	r1, [pc, #72]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800289a:	4313      	orrs	r3, r2
 800289c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028aa:	4b0e      	ldr	r3, [pc, #56]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	490b      	ldr	r1, [pc, #44]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80028c8:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d4:	4903      	ldr	r1, [pc, #12]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3748      	adds	r7, #72	@ 0x48
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e09d      	b.n	8002a36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d108      	bne.n	8002914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800290a:	d009      	beq.n	8002920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
 8002912:	e005      	b.n	8002920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fd fe5a 	bl	80005f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002956:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002960:	d902      	bls.n	8002968 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	e002      	b.n	800296e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800296c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002976:	d007      	beq.n	8002988 <HAL_SPI_Init+0xa0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002980:	d002      	beq.n	8002988 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ca:	ea42 0103 	orr.w	r1, r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	0c1b      	lsrs	r3, r3, #16
 80029e4:	f003 0204 	and.w	r2, r3, #4
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a04:	ea42 0103 	orr.w	r1, r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a46:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002a4a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <memset>:
 8002ab0:	4402      	add	r2, r0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <memset+0xa>
 8002ab8:	4770      	bx	lr
 8002aba:	f803 1b01 	strb.w	r1, [r3], #1
 8002abe:	e7f9      	b.n	8002ab4 <memset+0x4>

08002ac0 <__libc_init_array>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8002af8 <__libc_init_array+0x38>)
 8002ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8002afc <__libc_init_array+0x3c>)
 8002ac6:	1b64      	subs	r4, r4, r5
 8002ac8:	10a4      	asrs	r4, r4, #2
 8002aca:	2600      	movs	r6, #0
 8002acc:	42a6      	cmp	r6, r4
 8002ace:	d109      	bne.n	8002ae4 <__libc_init_array+0x24>
 8002ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8002b00 <__libc_init_array+0x40>)
 8002ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8002b04 <__libc_init_array+0x44>)
 8002ad4:	f000 f818 	bl	8002b08 <_init>
 8002ad8:	1b64      	subs	r4, r4, r5
 8002ada:	10a4      	asrs	r4, r4, #2
 8002adc:	2600      	movs	r6, #0
 8002ade:	42a6      	cmp	r6, r4
 8002ae0:	d105      	bne.n	8002aee <__libc_init_array+0x2e>
 8002ae2:	bd70      	pop	{r4, r5, r6, pc}
 8002ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae8:	4798      	blx	r3
 8002aea:	3601      	adds	r6, #1
 8002aec:	e7ee      	b.n	8002acc <__libc_init_array+0xc>
 8002aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af2:	4798      	blx	r3
 8002af4:	3601      	adds	r6, #1
 8002af6:	e7f2      	b.n	8002ade <__libc_init_array+0x1e>
 8002af8:	08002b50 	.word	0x08002b50
 8002afc:	08002b50 	.word	0x08002b50
 8002b00:	08002b50 	.word	0x08002b50
 8002b04:	08002b54 	.word	0x08002b54

08002b08 <_init>:
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0a:	bf00      	nop
 8002b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0e:	bc08      	pop	{r3}
 8002b10:	469e      	mov	lr, r3
 8002b12:	4770      	bx	lr

08002b14 <_fini>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	bf00      	nop
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr
