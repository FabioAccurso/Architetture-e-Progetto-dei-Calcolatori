**********************************************************
*	Sistema A - Ricevitore 
***********************************************************
* AREA DATI
******************************************
	ORG $8000
*Variabili
MSGB	DS.L	32	; Messaggi ricevuti da B		;[!!!!!!!!!!!] Implementa nel nodo A il modulo in modo che se su spera questo spazio allocato si ricomincia da capo
MSGC	DS.L	32	; Messaggi ricevuti da C
IDXB	DC.B	0	; Offset Messaggi B
IDXC	DC.B	0	; Offset Messaggi C
CB	DC.B	0	; Contatore caratteri messaggio B
CC	DC.B	0	; Contatore caratteri messaggio C
PFXB	DC.B	0	; Prefisso messaggio di B
PFXC	DC.B	0	; Prefisso messaggio di C
ENDB	DC.B	0	; Messaggi per iterazione B
ENDC	DC.B	0	; Messaggi per iterazione C
K	DC.B	0	; Contatore Iterazioni
FASE	DC.B	1	; Fase (1=Fase1 | 2=Fase2 | 0=Fine del programma)
POS	DC.B	0	; Variabile Possesso (0 libera , 1 di B, 2 di C)
SEM	DC.B	0	; Semaforo per controllare accesso alla variabile Possesso (POS)
SOSB	DC.B	0	; Flag utilizzato per verificare se B si è sospeso
SOSC	DC.B	0	; Flag utilizzato per verificare se C si è sospeso

*Macro
TOTK		EQU	3
N		EQU	4
PIADAB	EQU	$2004
PIACAB	EQU	$2005
PIADAC	EQU	$2008
PIACAC		EQU	$2009

*******************************************************************	
* AREA MAIN
*******************************************
MAIN	JSR	DVIN
	MOVE.W	SR,D0
	ANDI.W	#$D8FF,D0
	MOVE.W	D0,SR

******************************************************************
LOOP	JMP	LOOP
*****************************************************************
* INIZIALIZZAZIONE PIA-B E PIA-C
*****************************************
DVIN	MOVE.B	#$00,PIACAB
	MOVE.B	#$00,PIADAB
	MOVE.B	#%00100101,PIACAB
	MOVE.B	#$00,PIACAC
	MOVE.B	#$00,PIADAC
	MOVE.B	#%00100101,PIACAC
	RTS
****************************************************************
* Interruzione relativa a recezione caratteri da B
****************************************************
** PseudoCodice Interruzione B:
** if(Fase!=0)			//se il programma non e' terminato
** 	if(lock=0) 					//se il lock è libero (ovvero =0) -> Verra farra in maniera atomica con il TAS
**		lock=1
** 		if(possesso != 2 && endb!=1) 	// Quindi se possesso è di B o è libero e B non ha finito
**			possesso=1
**			lock=0
**			if(Fase=2 && caratteriB=0){
**				prefissoB=datoPIAB
**			}
**			messB+offsetB = datoPIAB
**			offsetB++
**			caratteriB++
**			if( caratteriB = N)
**				endB=1
**				if (endC=1){
**					Azzero caratteriB caratteriC endB e endC
**					if(Fase=1){
**						k++
**						if(k=totK){
**							fase=2
**						}
**					}		
**					else{
**						if(prefixC=prefixB){
**							fase=0
**						}
**					}
**				}
**				if( fase!=0 )
**					if(C sospeso){
**						possesso = 2
**						if(Fase=2 && caratteriC=0){
**							prefixC=datoPIAC
**						}
**						messC+offsetC = datoPIAC
**						offsetC++
**						caratC++	
**					}
**					else{
**						possesso = 0
**					}
**				}
** 		else{					// ovvero se possesso è di C
**			// Niente per B perche il possesso non era suo o libero ma sblocco lock e controllo se C si è sospeso mentre era bloccato
**			lock = 0
**			if(C sospeso ){
**				possesso = 2
**				if(Fase=2 && caratteriC=0){
**					prefixC=datoPIAC
**				}	
**				messC+offsetC = datoPIAC
**				offsetC++
**				caratC++	
**			}
**			exit
**	else{						//ovvero se il lock non è libero (=1) 
**		 exit
**	}
******************************************************
	ORG	$8600
INTB	MOVEM.L	D0-D7/A0-A2,-(A7)		; Move Multipla per fare push su stack dei registri
	
	MOVE.B	FASE,D0
	CMP.B	#0,D0
	BEQ		EOI

	
	LEA	MSGB,A0
	LEA	SEM,A1
	MOVEA.L	#PIADAB,A2
	MOVE.B	IDXB,D1
	MOVE.B	CB,D2
	MOVE.B	ENDB,D3
	MOVE.B	POS,D4
	MOVE.B	K,D5

	TAS	(A1)	
	BNE	EOI

	CMP.B		#2,D4
	BEQ	NP
	CMP.B		#1,D3
	BEQ	NP


	MOVE.B	#1,POS	; Metto Possesso a 1 -> B
	MOVE.B	#0,(A1)		; Sblocco Lock

	CMP.B		#2,D0
	BNE	NOPRE
	CMP.B		#0,D2
	BNE	NOPRE
	MOVE.B	(A2),PFXB

NOPRE	MOVE.B	(A2),(A0,D1)
	ADDI.B		#1,D2
	ADDI.B		#1,D1
	MOVE.B	D2,CB
	MOVE.B	D1,IDXB

	CMP.W	#N,D2
	BNE	EOI
	MOVE.B	#1,D3
	MOVE.B	D3,ENDB

	MOVE.B	ENDC,D3	
	CMP.B		#1,D3
	BNE	NY
	MOVE.B	#0,CB
	MOVE.B	#0,ENDB
	MOVE.B	#0,ENDC
	MOVE.B	#0,CC
	
	CMP.B		#1,D0
	BNE	CH2
	ADDI.B		#1,D5
	CMP.B		#TOTK,D5
	BNE	NOF
	MOVE.B	#2,D0
	MOVE.B	D0,FASE
NOF	JMP	NY

CH2	MOVE.B	PFXB,D6
	MOVE.B	PFXC,D7
	CMP.B		D6,D7
	BNE	NY
	MOVE.B	#0,D0
	MOVE.B	D0,FASE	


NY	CMP.B		#0,D0
	BEQ	EOI
	MOVE.B	SOSC,D1
	CMP.B		#1,D1
	BEQ	LC
	MOVE.B	#0,POS
	JMP	EOI

NP	MOVE.B	#0,POS
	MOVE.B	SOSC,D1
	CMP.B		#0,D1
	BEQ	EOI



LC	MOVE.B	#2,POS
	MOVEA.L	#MSGC,A0
	MOVE.B	IDXC,D1
	MOVE.B	CC,D2

	CMP.B		#2,D0
	BNE	NOPC
	CMP.B		#0,D2
	BNE	NOPC
	MOVE.B	(A2),PFXC
	
	
NOPC	MOVE.B	(A2),(A0,D1)
	ADDI.B		#1,D2
	ADDI.B		#1,D1
	MOVE.B	D2,CC
	MOVE.B	D1,IDXC


	CMP.B		#N,D2
	BNE	EOI
	MOVE.B	ENDC,D3
	MOVE.B	#1,D3
	MOVE.B	D3,ENDC
	MOVE.B	#0,CC
	
	MOVE.B	ENDB,D3
	CMP.B		#1,D3
	BNE	EOI
	MOVE.B	#0,ENDB
	MOVE.B	#0,ENDC
	MOVE.B	#0,CC
	MOVE.B	#0,CB

	CMP.B		#1,D0
	BNE	CH21
	ADDI.B		#1,D5
	CMP.B		#TOTK,D5
	BNE	NOF1
	MOVE.B	#2,D0
	MOVE.B	D0,FASE
NOF1	JMP	EOI

CH21	MOVE.B	PFXB,D6
	MOVE.B	PFXC,D7
	CMP.B		D6,D7
	BNE	EOI
	MOVE.B	#0,D0
	MOVE.B	D0,FASE	
	JMP	EOI

EOI	MOVEM.L	(A7)+,D0-D5/A0-A2

	RTE
****************************************************************
* Interruzione relativa a recezione caratteri da C
*****************************************************
** PseudoCodice:
** 
** Duale a quello per l'interruzione da B, con le stesse tipologie di conflitti, ma relativa a C
******************************************************
	ORG	$8800
INTC	MOVEM.L	D0-D7/A0-A2,-(A7)		; Move Multipla per fare push su stack dei registri
	
	MOVE.B	FASE,D0
	CMP.B		#0,D0
	BEQ		EOI2

	
	LEA	MSGC,A0
	LEA	SEM,A1
	MOVEA.L	#PIADAC,A2
	MOVE.B	IDXC,D1
	MOVE.B	CC,D2
	MOVE.B	ENDC,D3
	MOVE.B	POS,D4
	MOVE.B	K,D5

	TAS	(A1)	
	BNE	EOI2

	CMP.B		#1,D4
	BEQ	NP2
	CMP.B		#1,D3
	BEQ	NP2


	MOVE.B	#2,POS	; Metto Possesso a 2 -> C
	MOVE.B	#0,(A1)		; Sblocco Lock

	CMP.B		#2,D0
	BNE	NOPRE2
	CMP.B		#0,D2
	BNE	NOPRE2
	MOVE.B	(A2),PFXC

NOPRE2	MOVE.B	(A2),(A0,D1)
	ADDI.B		#1,D2
	ADDI.B		#1,D1
	MOVE.B	D2,CC
	MOVE.B	D1,IDXC

	CMP.W	#N,D2
	BNE	EOI2
	MOVE.B	#1,D3
	MOVE.B	D3,ENDC

	MOVE.B	ENDB,D3	
	CMP.B		#1,D3
	BNE	NY2
	MOVE.B	#0,CB
	MOVE.B	#0,ENDB
	MOVE.B	#0,ENDC
	MOVE.B	#0,CC
	
	CMP.B		#1,D0
	BNE	CH3
	ADDI.B		#1,D5
	CMP.B		#TOTK,D5
	BNE	NOF2
	MOVE.B	#2,D0
	MOVE.B	D0,FASE
NOF2	JMP	NY2

CH3	MOVE.B	PFXB,D6
	MOVE.B	PFXC,D7
	CMP.B		D6,D7
	BNE	NY2
	MOVE.B	#0,D0
	MOVE.B	D0,FASE	


NY2	CMP.B		#0,D0
	BEQ	EOI2
	MOVE.B	SOSB,D1
	CMP.B		#1,D1
	BEQ	LB
	MOVE.B	#0,POS
	JMP	EOI2

NP2	MOVE.B	#0,POS
	MOVE.B	SOSB,D1
	CMP.B		#0,D1
	BEQ	EOI2



LB	MOVE.B	#1,POS
	MOVEA.L	#MSGB,A0
	MOVE.B	IDXB,D1
	MOVE.B	CB,D2

	CMP.B		#2,D0
	BNE	NOPC2
	CMP.B		#0,D2
	BNE	NOPC2
	MOVE.B	(A2),PFXB
	
	
NOPC2	MOVE.B	(A2),(A0,D1)
	ADDI.B		#1,D2
	ADDI.B		#1,D1
	MOVE.B	D2,CB
	MOVE.B	D1,IDXB


	CMP.B		#N,D2
	BNE	EOI2
	MOVE.B	ENDB,D3
	MOVE.B	#1,D3
	MOVE.B	D3,ENDB
	MOVE.B	#0,CB
	
	MOVE.B	ENDC,D3
	CMP.B		#1,D3
	BNE	EOI2
	MOVE.B	#0,ENDB
	MOVE.B	#0,ENDC
	MOVE.B	#0,CC
	MOVE.B	#0,CB

	CMP.B		#1,D0
	BNE	CH22
	ADDI.B		#1,D5
	CMP.B		#TOTK,D5
	BNE	NOF3
	MOVE.B	#2,D0
	MOVE.B	D0,FASE
NOF3	JMP	EOI2

CH22	MOVE.B	PFXB,D6
	MOVE.B	PFXC,D7
	CMP.B		D6,D7
	BNE	EOI2
	MOVE.B	#0,D0
	MOVE.B	D0,FASE	
	JMP	EOI2

EOI2	MOVEM.L	(A7)+,D0-D5/A0-A2

	RTE

********************************************************************
	END	MAIN










